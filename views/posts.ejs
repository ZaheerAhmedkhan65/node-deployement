<%- include('partials/_header') %>
    <div class="row">
        <div class="card  border-0">
            <div class="card-body">
                <div class="d-flex align-items-center justify-content-between">
                    <h1>Posts</h1>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newPostModal">
                        new post
                    </button>
                </div>

                <ul id="posts-container" class="list-group">
                    <%if(posts.length > 0){%>
                    <% posts.forEach(post=> { %>
                        <li id="post-<%= post.id %>" class="card my-1">
                            <div class="card-body">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div>
                                        <strong class="text-decoration-none"><%= post.title %></strong> 
                                        <span class="text-muted mx-2">
                                            <%= post.published_at %>
                                        </span>
                                        <p class="text-muted">
                                            <%= post.content %>
                                        </p>
                                    </div>
                                    <!-- Inside your post loop -->
<div class="d-flex align-items-center gap-2">
    <button id="edit-post-btn-<%= post.id %>" class="btn btn-sm btn-info edit-post-btn" 
            data-bs-toggle="modal" data-bs-target="#editPostModal" 
            data-id="<%= post.id %>"
            data-title="<%= post.title %>" 
            data-content="<%= post.content %>"
            data-published_at="<%= post.published_at %>">
        Edit
    </button>
    <button type="button" data-post-id="<%= post.id %>" 
            class="btn btn-sm btn-danger delete-post-btn">
        Delete
    </button>
    
    <!-- Like/Dislike buttons -->
    <div class="btn-group" role="group">
        <button class="btn btn-sm <%= post.userReaction === 'like' ? 'btn-success' : 'btn-outline-success' %> like-btn" 
                data-post-id="<%= post.id %>">
            Like (<span class="like-count"><%= post.likes %></span>)
        </button>
        <button class="btn btn-sm <%= post.userReaction === 'dislike' ? 'btn-danger' : 'btn-outline-danger' %> dislike-btn" 
                data-post-id="<%= post.id %>">
            Dislike (<span class="dislike-count"><%= post.dislikes %></span>)
        </button>
    </div>
    
    <!-- Repost button -->
    <button class="btn btn-sm <%= post.hasReposted ? 'btn-primary' : 'btn-outline-primary' %> repost-btn" 
            data-post-id="<%= post.id %>">
        Repost (<span class="repost-count"><%= post.reposts %></span>)
    </button>
</div>
                                </div>
                            </div>

                        </li>
                        <% }) %>
                    <%}else{%>
                        <li class="list-group-item"><p>No posts created yet.Create one !</p></li>
                    <%}%>
                </ul>

                <!-- Modal -->
                <div class="modal fade" id="newPostModal" tabindex="-1" aria-labelledby="newPostModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title fs-5" id="newPostModalLabel">New Post</h1>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="card">
                                    <form id="create-post-form" action="/posts/create" method="POST" class="card-body">
                                        <label for="title" class="form-label">Title</label>
                                        <input type="text" name="title" id="title" placeholder="Title"
                                            class="form-control" required>
                                        <label for="content" class="form-label">Content</label>
                                        <input type="text" name="content" id="content" placeholder="Content"
                                            class="form-control" required>
                                        <label for="published_at" class="form-label">Publish Date</label>
                                        <input type="date" name="published_at" id="published_at" class="form-control">
                                        <input type="hidden" id="user_id" name="user_id" value="<%= userId %>">
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary btn-sm mt-2"
                                                data-bs-dismiss="modal">Close</button>
                                            <button id="create-post-btn" type="submit" class="btn btn-sm mt-2"
                                                style="background-color: black; color: white;">Create</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Post Modal -->
        <div class="modal fade" id="editPostModal" tabindex="-1" aria-labelledby="editPostModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editPostModalLabel">Edit Post</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="edit-post-form">
                            <input type="hidden" id="edit-post-id">
                            <div class="mb-3">
                                <label for="edit-title" class="form-label">Title</label>
                                <input type="text" class="form-control" id="edit-title" required>
                            </div>
                            <div class="mb-3">
                                <label for="edit-content" class="form-label">Content</label>
                                <textarea class="form-control" id="edit-content" rows="3" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="edit-published_at" class="form-label">Publish Date</label>
                                <input type="date" class="form-control" id="edit-published_at">
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-primary">Save changes</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

        <script src="/js/createPost.js"></script>
        <script src="/js/editPost.js"></script>
        <script src="/js/deletePost.js"></script>
        <script src="/js/showNotification.js"></script>
        <script>
            // Like functionality
document.querySelectorAll('.like-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const postElement = document.getElementById(`post-${postId}`);
        console.log(postElement);
        
        try {
            const response = await fetch(`/posts/${postId}/like`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ type: 'like' })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Update counts
                postElement.querySelector('.like-count').textContent = data.reactions.likes;
                postElement.querySelector('.dislike-count').textContent = data.reactions.dislikes;
                
                // Update button states
                const likeBtn = postElement.querySelector('.like-btn');
                const dislikeBtn = postElement.querySelector('.dislike-btn');
                
                if (data.userReaction === 'like') {
                    likeBtn.classList.replace('btn-outline-success', 'btn-success');
                    dislikeBtn.classList.replace('btn-danger', 'btn-outline-danger');
                } else {
                    likeBtn.classList.replace('btn-success', 'btn-outline-success');
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
});

// Dislike functionality
document.querySelectorAll('.dislike-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const postElement = document.getElementById(`post-${postId}`);
        
        try {
            const response = await fetch(`/posts/${postId}/like`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ type: 'dislike' })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Update counts
                postElement.querySelector('.like-count').textContent = data.reactions.likes;
                postElement.querySelector('.dislike-count').textContent = data.reactions.dislikes;
                
                // Update button states
                const likeBtn = postElement.querySelector('.like-btn');
                const dislikeBtn = postElement.querySelector('.dislike-btn');
                
                if (data.userReaction === 'dislike') {
                    dislikeBtn.classList.replace('btn-outline-danger', 'btn-danger');
                    likeBtn.classList.replace('btn-success', 'btn-outline-success');
                } else {
                    dislikeBtn.classList.replace('btn-danger', 'btn-outline-danger');
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
});

// Repost functionality
document.querySelectorAll('.repost-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
        const postId = this.dataset.postId;
        const postElement = document.getElementById(`post-${postId}`);
        console.log(postElement);
        try {
            const response = await fetch(`/posts/${postId}/repost`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Update repost count
                postElement.querySelector('.repost-count').textContent = data.repostCount;
                
                // Toggle button state
                const repostBtn = postElement.querySelector('.repost-btn');
                if (data.hasReposted) {
                    repostBtn.classList.replace('btn-outline-primary', 'btn-primary');
                } else {
                    repostBtn.classList.replace('btn-primary', 'btn-outline-primary');
                }
                
                // showNotification(data.action === 'added' ? 'Post reposted!' : 'Repost removed', 'success');
            }
        } catch (error) {
            console.error('Error:', error);
            // showNotification('Failed to process repost', 'error');
        }
    });
});
        </script>
            <script src="/js/userSession.js"></script>
        <%- include('partials/_footer') %>